# version: '3.8'

# services:
#   db:
#     image: postgres:15
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=realtime_messaging
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=postgres
#     ports:
#       - "5432:5432"

#   backend:
#     build: ./backend
#     command: python3 manage.py runserver 0.0.0.0:8000
#     volumes:
#       - ./backend:/app
#     ports:
#       - "8000:8000"
#     depends_on:
#       - db
#     restart: on-failure


#   # frontend:
#   #   build: ./frontend
#   #   ports:
#   #     - "5000:5000"
#   #   depends_on:
#   #     - backend

#   # nginx:
#   #   image: nginx:latest
#   #   ports:
#   #     - "80:80"
#   #   volumes:
#   #     - ./nginx:/etc/nginx/conf.d
#   #   depends_on:
#   #     - frontend
#   #     - backend

# volumes:
#   postgres_data:


version: '3'

services:
  frontend:
    image: node:latest
    command: sh -c "npm i && npm run build"
    container_name: frontend
    working_dir: /var/www/frontend
    ports:
      - "3000:3000"
    init: true
    volumes:
      # mount host directory inside container. requires manual npm/frontend build.
      - ./frontend:/var/www/frontend
      - npm:/root/.npm

  postgres:
    container_name: postgres
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=realtime_messaging
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data


  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: realtime_messaging_backend
    image: realtime_messaging_backend
    ports:
      - '8000:8000'
    depends_on:
      - postgres
    command: sh -c "python3 backend/manage.py runserver"
    restart: on-failure

  nginx:
    image: nginx
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend:/var/www/frontend
      - ./backend:/var/www/backend
      - ./certs:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend

networks:
  dbNetwork:
    driver: bridge

volumes:
  data:
  pipcache:
  pgdata:
  npm:
  esdata:
  postgres-data: null
